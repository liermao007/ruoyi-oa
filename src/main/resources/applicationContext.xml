<?xml version="1.0" encoding="UTF-8"?>
<!-- 查找最新的schemaLocation 访问 http://www.springframework.org/schema/ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.9.0.xsd">

	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	<context:property-placeholder location="classpath:oa.properties" />
	<!-- 配置扫描路径 -->
	<!--<context:component-scan base-package="com.*">-->
		<!-- 只扫描Service，也可以添加Repostory，但是要把Controller排除在外，Controller由spring-mvc.xml去加载 -->
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" /> -->
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" /> -->
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" /> -->
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
	<!--</context:component-scan>-->
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!--&lt;!&ndash; myBatis文件 &ndash;&gt;-->
	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
		<!--<property name="dataSource" ref="dataSource" />-->
		<!--&lt;!&ndash; 自动扫描entity目录, 省掉Configuration.xml里的手工配置 &ndash;&gt;-->
		<!--<property name="mapperLocations" value="classpath:mappings/tgb/SpringActivemq/AmqMsgDao.xml" />-->
	<!--</bean>-->

	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="basePackage" value="com.thinkgem.jeesite.modules.oa.dao" />-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--<property name="dataSource" ref="dataSource" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; 注解方式配置事物 &ndash;&gt;-->
	<!--&lt;!&ndash; <tx:annotation-driven transaction-manager="transactionManager" /> &ndash;&gt;-->
	<!--&lt;!&ndash; 拦截器方式配置事物 &ndash;&gt;-->
	<!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
		<!--<tx:attributes>-->
			<!--&lt;!&ndash; REQUIRED:在有transaction状态下执行；如当前没有transaction，则创建新的transaction； &ndash;&gt;-->
			<!--&lt;!&ndash; SUPPORTS:如当前有transaction，则在transaction状态下执行；如果当前没有transaction，在无transaction状态下执行； &ndash;&gt;-->
			<!--<tx:method name="insert*" propagation="REQUIRED" />-->
			<!--<tx:method name="delete*" propagation="REQUIRED" />-->
			<!--<tx:method name="edit*" propagation="REQUIRED" />-->
			<!--<tx:method name="save*" propagation="REQUIRED" />-->
			<!--<tx:method name="increase*" propagation="REQUIRED" />-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->
	<!--<aop:config>-->
		<!--<aop:pointcut id="transactionPointcut" expression="execution(* com.thinkgem.jeesite.modules.oa.service..*(..))" />-->
		<!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />-->
	<!--</aop:config>-->


	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.cg.ssm.service.*</value>
			</list>
		</property>
	</bean>

</beans>  